{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["commons","rowGap","columnGap","variations","blog","matrix","rows","columns","crossOver","splitHorizontal","splitVertical","leaveBlank","undefined","Example","layout","className","id","Controls","setLayout","Object","keys","map","key","onClick","mapClass","value","Matrix","row","index","Fragment","x","i","length","Others","join","Header","href","App","useState","isMobile","useMediaQuery","maxWidth","et","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0734db45.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {Cell, Grid} from \"react-grata\";\nimport { useMediaQuery } from 'react-responsive'\nimport './App.css';\n\nconst commons = {\n  rowGap: \"12px\",\n  columnGap: \"12px\"\n}\nconst variations = {\n  blog: {\n    ...commons,\n    matrix: [\n      [1, 1, 1],\n      [2, 3, 4],\n      [5, 5, 5],\n    ],\n    rows: [\n      \"20%\",\n      \"fit-height\",\n      \"20%\",\n    ],\n    columns: [\"20%\", \"1fr\", \"20%\"],\n  },\n  crossOver: {\n    ...commons,\n    matrix: [\n      [1, 1, 2],\n      [4, 5, 2],\n      [4, 3, 3],\n    ],\n  },\n  splitHorizontal: {\n    ...commons,\n    matrix: [\n      [1, 2]\n    ]\n  },\n  splitVertical: {\n    ...commons,\n    matrix: [\n      [1],\n      [2],\n    ]\n  },\n  leaveBlank: {\n    ...commons,\n    matrix: [\n      [1, 1, undefined],\n      [undefined, 2, 2],\n      [3, undefined, 4],\n    ]\n  }\n}\n\nconst Example = ({layout}) => (\n  <Grid className=\"example-grid\" {...layout}>\n    <Cell id={1}><span className=\"one\">One</span></Cell>\n    <Cell id={2}><span className=\"two\">Two</span></Cell>\n    <Cell id={3}><span className=\"three\">Three</span></Cell>\n    <Cell id={4}><span className=\"four\">Four</span></Cell>\n    <Cell id={5}><span className=\"five\">Five</span></Cell>\n  </Grid>\n)\n\nconst Controls = ({setLayout}) => {\n  return (\n    <ul>\n      {Object.keys(variations)\n        .map(key => (\n          <li key={key}>\n            <button onClick={() => setLayout(variations[key])}>{key}</button>\n          </li>\n        ))}\n    </ul>\n  )\n}\n\nconst mapClass = (value) => {\n  switch (value) {\n    case 1:\n      return 'one';\n    case 2:\n      return 'two';\n    case 3:\n      return 'three';\n    case 4:\n      return 'four';\n    case 5:\n      return 'five';\n    default:\n      return '';\n  }\n}\n\nconst Matrix = ({layout}) => {\n  return (\n    <>\n      <h3>\n        <code>matrix</code>\n      </h3>\n      <pre>[\n        <br/>\n      {layout.matrix.map((row, index) => {\n          return (\n            <React.Fragment key={`row-${index}`}>\n              <span>  [{row.map(x => x || ' ').map((x, i) => {\n                return (\n                  <React.Fragment key={`${x}-${i}`}>\n                    <span className={mapClass(x)}>{x}</span>\n                    {i === row.length - 1 ? '' : ', '}\n                  </React.Fragment>\n                );\n              })}]</span>\n              , <span className=\"comments\">// row {index + 1}</span>\n              <br/>\n            </React.Fragment>\n          )\n        })}]\n      </pre>\n    </>\n  )\n}\n\nconst Others = ({layout}) => {\n  return (\n    <>\n    {\n      layout.rows && (\n        <>\n          <h3>\n            <code>rows</code>\n          </h3>\n          <pre>\n            rows: <br />[\"{layout.rows.join('\", \"')}\"]<br />\n          </pre>\n        </>\n      )\n    }\n      {\n        layout.columns && (\n          <>\n            <h3>\n              <code>columns</code>\n            </h3>\n            <pre>\n            columns: <br />[\"{layout.columns.join('\", \"')}\"]<br />\n          </pre>\n          </>\n        )\n      }\n    </>\n  )\n}\n\nconst Header = () => (\n  <h1>Responsive Layout with &nbsp;\n    <a href=\"https://github.com/zhenyanghua/react-grata\">\n      React-grata\n    </a>\n  </h1>\n);\n\nfunction App() {\n  const [layout, setLayout] = useState(variations.blog)\n  const isMobile = useMediaQuery({ maxWidth: 800 })\n  const et = layout.rows || layout.columns ? 'et' : 'mx';\n  const matrixMobile = [\n    ['hd'],\n    ['bd'],\n    ['sd'],\n    ['mx'],\n    ['et'],\n  ];\n  const matrixOthers = [\n    ['hd', 'hd', 'hd'],\n    ['sd', 'bd', 'bd'],\n    ['mx', 'bd', 'bd'],\n    [ et , 'bd', 'bd'],\n  ];\n  const rowsMobile = [\"auto\", \"1fr\", \"1fr\", \"1fr\", \"1fr\"];\n  const rowsOthers = [\"auto\", \"1fr\", \"1fr\", \"1fr\"];\n  const rows = isMobile ? rowsMobile : rowsOthers;\n  const matrix = isMobile ? matrixMobile : matrixOthers;\n  return (\n    <Grid className=\"page-grid\" matrix={matrix} rows={rows} {...commons}>\n      <Cell id=\"hd\"><Header /></Cell>\n      <Cell id=\"bd\"><Example layout={layout}/></Cell>\n      <Cell id=\"sd\"><Controls setLayout={setLayout}/></Cell>\n      <Cell id=\"mx\"><Matrix layout={layout} /></Cell>\n      <Cell id=\"et\"><Others layout={layout}/></Cell>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}